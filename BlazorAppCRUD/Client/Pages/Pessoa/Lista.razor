@page "/pessoa"
@page "/pessoa/lista"
@inject HttpClient http

<h3>Lista de pessoas</h3>

<div>
    <a href="pessoa/criar" class="btn btn-success">Criar</a>
</div>

<div>
    @if (pessoas == null) {
        <p>Carregando...</p>
    }
    else if (pessoas.Count <= 0) {
        <p>Não há pessoas no banco de dados.</p>
    }
    else {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Peso</th>
                    <th>Ação</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pessoa in pessoas) {
                    <tr>
                        <td>@pessoa.Id</td>
                        <td>@pessoa.Nome</td>
                        <td>@pessoa.Peso</td>
                        <td>
                            <a class="btn btn-success" href="pessoa/editar/@pessoa.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="(() => ExcluirPessoa(pessoa.Id))">Excluir</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    List<Pessoa> pessoas;

    protected override async Task OnInitializedAsync() {
        await LoadPessoas();
    }

    private async Task LoadPessoas() {
        pessoas = await http.GetFromJsonAsync<List<Pessoa>>("api/pessoa");

        //await Task.Delay(500);

        //pessoas = new List<Pessoa> {
        //    new Pessoa { Id=1, Nome="Testerino", Peso=100 },
        //    new Pessoa { Id=3, Nome="Testerina", Peso=75 },
        //};
    }

    private async Task ExcluirPessoa(int id) {
        await http.DeleteAsync($"api/pessoa/{id}");
        await LoadPessoas();
    }
}
